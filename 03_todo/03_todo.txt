## 프로젝트 설명

- 하단의 입력 창에 텍스트(할일)를 입력하면 노란 말풍선 형태의 할일이 추가됩니다.
- 각 할일의 말풍선을 클릭하면 말풍선이 회색으로 바뀝니다.
- 각 할일의 x 버튼을 누르면 말풍선이 사라집니다.
- 화면에 표시되고 있는 할일은 모두 로컬스토리지에 저장되어, 페이지를 꼈다 켜도 사라지지 않고 유지됩니다.


## index.html

- id가 "todo-list"인 목록이 할일이 추가되는 목록입니다. 할일 하나당 li 하나입니다.
- id가 "todo-form"인 폼에서 할일을 입력하고 제출합니다. 


## script.js : 요소 선택 및 배열 선언

- todoList와 todoForm는 각각 목록(ul)과 할일 입력 폼을 선택한 것입니다.
- todoArr는 할일을 보관하는 배열입니다. 


## script.js : displayTodos 함수

- displayTodos 함수가 호출될 때마다 todoArr 배열의 요소들을 화면(ul)에 새로 표시하게 됩니다.
- 새로 표시하기 때문에, 함수 내 첫 줄에서는 기존 내용을 모두 없애는 것부터 시작합니다. (todoList.innerHTML = "")
- todoArr는 배열이므로 forEach 메소드 사용이 가능합니다. 콜백함수를 요소 수만큼 호출하고, 호출 시마다 각 요소를 인자로 전달받는 메소드입니다.
- createElement로 생성된 todoItem과 todoDelBtn은 각각 노란말풍선과 x버튼입니다.
- classList와 삼항연산을 이용해 'done' 또는 'yet' 클래스를 추가하고 있는데, 클래스가 무언가에 따라 말풍선 색이 달라집니다. (스타일시트를 통한)
- todoDelBtn 클릭 시에는 클릭한 할일을 지워주는 handleTodoDelBtnClick 함수를 호출합니다.
- todoItem 클릭 시에는 클릭한 할일의 상태를 변경해주는 handleTodoItemClick 함수를 호출합니다. 여기서 상태란 done 또는 yet입니다.


## script.js : handleTodoDelBtnClick 함수

- handleTodoDelBtnClick 함수는 주어진 아이디(id)를 가진 할일만 todoArr에서 제외시키는 역할을 합니다.
- 배열의 filter 메소드는 forEach와 마찬가지로 인자로 전달된 함수를 요소 수만큼 호출하고, 인자로 각 요소를 전달합니다.
- filter 메소드는 콜백함수가 true를 반환하는 경우에 해당하는 배열요소(인자)만을 따로 모아서 만든 배열을 반환합니다.
- return aTodo.todoId !== clickedId, 이 경우 지우고자 하는 할일 아이디가 아닌 경우 모두 true를 반환합니다.
- 결과적으로 todoArr 배열은 지워진 할일 하나를 제외한 나머지로 구성된 배열이 됩니다.
- 배열의 요소가 변경되었기 때문에, handleTodoDelBtnClick 의 끝에는 displayTodos 함수를 다시 호출해줍니다. 
- saveTodos는 로컬스토리지에 todoArr의 내용을 저장해주는 함수입니다.


## script.js : handleTodoItemClick 함수

- handleTodoItemClick 함수는 주어진 아이디(id)를 가진 할일의 상태를 변경하는 역할을 합니다. 여기서 상태란 done 또는 yet입니다.
- 배열의 map 메소드는 forEach와 마찬가지로 인자로 전달된 함수는 요소 수만큼 호출하고, 인자로 각 요소를 전달합니다.
- map 메소드는 콜백함수가 return하는 값만을 따로 모아서 배열을 만들고 이를 반환합니다.
- 이 함수에서 return문을 보면, aTodo.todoId !== clickedId 를 통해 클릭한 할일과 그렇지 않은 할일의 결과를 구분하고 있습니다. 
- 클릭한 할일은 todoDone의 상태를 변경합니다. ! 연산자를 사용하면 true를 false로, false를 true로 변경합니다.
- 클릭하지 않은 할일은 그냥 그대로 aTodo를 다시 반환합니다.
- 결과적으로 todoArr 배열은 거의 원래상태 그대로에서 할일 하나의 todoDone만 바뀐 상태가 됩니다.
- 배열의 요소가 변경되었기 때문에, handleTodoItemClick 의 끝에는 displayTodos 함수를 다시 호출해줍니다.  
- saveTodos는 로컬스토리지에 todoArr의 내용을 저장해주는 함수입니다.


## script.js : saveTodos 함수

- 현재 남아 있는 할일들을 모두 로컬스토리지에 저장해주는 함수입니다. 
- todoArr는 배열인데, 로컬스토리지에는 문자열만 저장할 수 있습니다. 
- 배열을 JSON 포맷의 문자열로 변경하기 위해, JSON.stringify 메소드를 사용했습니다.
- 변경한 문자열은 로컬스토리지의 setItem 메소드를 사용해 로컬스토리지에 저장했습니다.
- 저장된 데이터에는 'myTodos'라는 이름을 붙였습니다.
- 로컬스토리지에 저장된 'myTodos'는 페이지를 꺼도, 컴퓨터를 꺼도 지워지지 않고 보관됩니다.


## script.js : loadTodos 함수

- 로컬스토리지에 저장된 값을 불러오는 함수ㄹ, 페이지를 열면 최초로 실행되는 함수입니다.
- 로컬스토리지의 getItem 메소드를 통해 'myTodos'라는 이름을 가진 데이터를 로컬스토리지로부터 가져옵니다.
- 가져온 데이터는 JSON 포맷 문자열이므로 이를 배열로 변경해주는 작업이 필요합니다. JSON.parse
- parse한 결과를 그려야 합니다. displayTodos


## script.js : 할일 입력 후 제출하면 발생하는 이벤트 핸들링

- 폼의 제출 이벤트는 서버와의 연계로 인해 새로고침이 되어버리므로 e.preventDefault()를 통해 기본 동작을 차단했습니다.
- toBeAdded는 todoArr 배열에 추가될 하나의 할일을 의미합니다. 
- 할일은 단순히 텍스트가 아닌, 세 개의 키로 구성된 객체입니다. 각각의 키는 할일의 속성입니다. 
- todoText 키는 입력된 할일 텍스트입니다.
- todoId 키는 할일에 할당된 고유한 값입니다. 다른 할일과의 확실한 구별을 위해 추가한 키입니다. 
- todoId 키에는 Date 생성자를 사용해 현재시간 정보를 지정했습니다. 현재시간 정보는 절대 중복될 일이 없습니다.
- todoDone 키는 할일이 끝났는지 끝나지 않았는지를 나타내는 키입니다(불리언). 이는 나중에 class를 yet으로 하냐 done으로 하냐의 기준이 됩니다.
- 할일 객체 추가는 배열의 push 메소드로 해 줍니다.
- 할일이 추가될 때마다 화면에 표시하고(displayTodos), 로컬스토리지에 저장(saveTodos)도 필수입니다.